import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.nio.file.Path;public class BMPFile {    FileInputStream file;    String bfType = "";    byte[] allBytes;    int bfSize = 0;    short bfReserved1 = 0;    short bfReserved2 = 0;    int bfOffBits = 0;    int biSize = 0;    int biHeight = 0;    int biWidth = 0;    short biPlanes = 0;    short biCount = 0;    int biCompression = 0;    int biSizeImage = 0;    int biXPelsPerMeter = 0;    int biYPelsPerMeter = 0;    int biClrUsed = 0;    int biClrImportant = 0;    public static void main(String[] args) throws IOException {        BMPFile bmp = new BMPFile(Path.of("src/White.bmp"));        System.out.println(bmp.toString());    }    BMPFile(Path path){        try {            file = new FileInputStream(path.toFile());            readHeader();        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }    private void readHeader(){        try {            byte[] byteArrayFile = file.readAllBytes();            allBytes = byteArrayFile;            bfType += (char)byteArrayFile[0];            bfType += (char)byteArrayFile[1];            bfSize = ((byteArrayFile[5] & 0xFF) << 24) + ((byteArrayFile[4] & 0xFF) << 16) + ((byteArrayFile[3] & 0xFF) << 8) + (byteArrayFile[2] & 0xFF);            bfReserved1 = (short) ((byteArrayFile[7] & 0xff) + (byteArrayFile[6] & 0xff));            bfReserved2 = (short) ((byteArrayFile[9] & 0xff) + (byteArrayFile[8] & 0xff));            bfOffBits = ((byteArrayFile[13] & 0xFF) << 24) + ((byteArrayFile[12] & 0xFF) << 16) + ((byteArrayFile[11] & 0xFF) << 8) + (byteArrayFile[10] & 0xFF);            biSize = ((byteArrayFile[17] & 0xFF) << 24) + ((byteArrayFile[16] & 0xFF) << 16) + ((byteArrayFile[15] & 0xFF) << 8) + (byteArrayFile[14] & 0xFF);            biHeight = ((byteArrayFile[21] & 0xFF) << 24) + ((byteArrayFile[20] & 0xFF) << 16) + ((byteArrayFile[19] & 0xFF) << 8) + (byteArrayFile[18] & 0xFF);            biWidth = ((byteArrayFile[25] & 0xFF) << 24) + ((byteArrayFile[24] & 0xFF) << 16) + ((byteArrayFile[23] & 0xFF) << 8) + (byteArrayFile[22] & 0xFF);            biPlanes = (short) ((byteArrayFile[27] & 0xff) + (byteArrayFile[26] & 0xff));            biCount = (short) ((byteArrayFile[28] & 0xff) + (byteArrayFile[29] & 0xff));            biCompression = ((byteArrayFile[33] & 0xFF) << 24) + ((byteArrayFile[32] & 0xFF) << 16) + ((byteArrayFile[31] & 0xFF) << 8) + (byteArrayFile[30] & 0xFF);            biSizeImage = ((byteArrayFile[37] & 0xFF) << 24) + ((byteArrayFile[36] & 0xFF) << 16) + ((byteArrayFile[35] & 0xFF) << 8) + (byteArrayFile[34] & 0xFF);            biXPelsPerMeter = ((byteArrayFile[41] & 0xFF) << 24) + ((byteArrayFile[40] & 0xFF) << 16) + ((byteArrayFile[39] & 0xFF) << 8) + (byteArrayFile[38] & 0xFF);            biYPelsPerMeter = ((byteArrayFile[45] & 0xFF) << 24) + ((byteArrayFile[44] & 0xFF) << 16) + ((byteArrayFile[43] & 0xFF) << 8) + (byteArrayFile[42] & 0xFF);            biClrUsed = ((byteArrayFile[49] & 0xFF) << 24) + ((byteArrayFile[48] & 0xFF) << 16) + ((byteArrayFile[47] & 0xFF) << 8) + (byteArrayFile[46] & 0xFF);            biClrImportant = ((byteArrayFile[53] & 0xFF) << 24) + ((byteArrayFile[52] & 0xFF) << 16) + ((byteArrayFile[51] & 0xFF) << 8) + (byteArrayFile[50] & 0xFF);        } catch (IOException e) {            e.printStackTrace();        }    }    @Override    public String toString() {        return "Type: " + bfType + "\n" +                "Size: " + bfSize + "\n" +                "Reversed1: " + bfReserved1 + "\n" +                "Reversed2: " + bfReserved2 + "\n" +                "OffBits: " + bfOffBits + "\n" +                "DIB Header Size: " + biSize + "\n" +                "Width: " + biWidth + "\n" +                "Height: " + biHeight + "\n" +                "Color Planes: " + biPlanes + "\n" +                "Bits per Pixel: " + biCount + "\n" +                "Compression Method: " + biCompression + "\n" +                "Raw image size: " + biSizeImage + "\n" +                "Horizontal Resolution: " + biXPelsPerMeter + "\n" +                "Vertical Resolution: " + biYPelsPerMeter + "\n" +                "Number of Colors: " + biClrUsed + "\n" +                "Important cColours: " + biClrImportant;    }}